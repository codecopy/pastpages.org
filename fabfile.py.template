from __future__ import with_statement
import os
import sys
pwd = os.path.dirname(__file__)
sys.path.append(pwd)
from fabric.api import *
from pprint import pprint
from openstack.compute import Compute


def prod():
    """
    The production server in the RaceSpace cloud
    """
    env.user = ''
    env.password = ''
    env.hosts = ['',]
    env.chef = '/var/lib/gems/1.8/bin/chef-solo -c solo.rb -j node.json'
    env.repo = 'git@github.com:pastpages/pastpages.org.git'
    env.app_user = 'palewire'
    env.project_dir = '/apps/pastpages.org/repo/'
    env.activate = "source /apps/pastpages.org/bin/activate"


def deploy():
    """
    Deploy the latest code and restart everything.
    
    Does not rebuild flat files or publish to S3.
    
    A full rebuild and republish of the site would be:
        
        $ fab deploy
        $ fab build
        $ fab publish
        
    """
    pull()
    with settings(warn_only=True):
        clean()
    install_requirements()
    #collectstatic()
    restart_apache()


def push_settings():
    """
    Push the latest settings out.
    """
    put(
        'project/settings_prod.py',
        os.path.join(env.project_dir, 'project/settings_prod.py')
    )


def restart_apache():
    """
    Restarts apache on both app servers.
    """
    sudo("service apache2 restart", pty=True)


def restart_celery():
    """
    Restarts the celeryd task server
    """
    _venv("/etc/init.d/celeryd restart")


def update_celery_daemon():
    """
    Update the celeryd init file on prod.
    """
    with settings(warn_only=True):
        _venv("/etc/init.d/celeryd stop")
    source = os.path.join(PATH, 'init.d', 'celeryd')
    target = os.path.join('/etc', 'init.d', 'celeryd')
    with settings(warn_only=True):
        sudo("rm %s" % target)
    sudo("cp %s %s" % (source, target))
    sudo("chmod +x %s" % target)
    _venv("/etc/init.d/celeryd restart")


def clean():
    """
    Erases pyc files from our app code directory.
    """
    _venv("find . -name '*.pyc' -print0|xargs -0 rm")


def install_requirements():
    """
    Install the Python requirements.
    """
    _venv("pip install -r requirements.txt")


def pull():
    """
    Pulls the latest code from github.
    """
    _venv("git pull origin master")


def manage(cmd):
    _venv("python manage.py %s" % cmd)


def syncdb():
    """
    Run python manage.py syncdb over on our prod machine
    """
    _venv("python manage.py syncdb")


def migrate(app):
    """
    Run python manage.py migration over on our prod machine
    """
    _venv("python manage.py migrate %s" % app)


def collectstatic():
    """
    Roll out the latest static files
    """
    _venv("python manage.py collectstatic --noinput")


def backup_postgres():
    """
    Backup the postgres database
    """
    _venv('python toolbox/backups/postgres.py')


def _venv(cmd):
    """
    A wrapper for running commands in our prod virturalenv
    """
    with cd(env.project_dir):
        sudo(
            "%s && %s && %s" % (env.activate, env.activate, cmd),
            pty=True,
            user=env.app_user
        )

def loaddb(date=''):
    """
    Load the latest db using our management command.
    """
    local("python manage.py loaddb %s".strip() % date)

#
# OpenStack
#

def bootstrap():
    install_chef()
    update_chef()


def install_chef():
    sudo('apt-get update', pty=True)
    sudo('apt-get install -y git-core rubygems ruby ruby-dev', pty=True)
    sudo('gem install chef', pty=True)


def update_chef():
    local('rsync -av ./chef/ %s@%s:/etc/chef' % (env.user, env.hosts[0]))
    sudo('cd /etc/chef && %s' % env.chef, pty=True)


def list_servers():
    compute = Compute(
        username='palewire',
        apikey=''
    )
    pprint(compute.servers.list())


def create_server(name, image='Ubuntu 11.04', flavor=256):
    compute = Compute(
        username='',
        apikey=''
    )
    fl = compute.flavors.find(ram=flavor)
    im = compute.images.find(name=image)
    compute.servers.create(name, image=im, flavor=fl)

#
# Misc
#

def load():
    """
    Prints the current load values.
    
    Example usage:
    
        $ fab stage load
        $ fab prod load
        
    """
    def _set_color(load):
        """
        Sets the terminal color for an load average value depending on how 
        high it is.
        
        Accepts a string formatted floating point.

        Returns a formatted string you can print.
        """
        value = float(load)
        template = "\033[1m\x1b[%sm%s\x1b[0m\033[0m"
        if value < 1:
            # Return green
            return template % (32, value)
        elif value < 3:
            # Return yellow
            return template % (33, value)
        else:
            # Return red
            return template % (31, value)
    
    with hide('everything'):
        # Fetch the data
        uptime = run("uptime")
        # Whittle it down to only the load averages
        load = uptime.split(":")[-1]
        # Split up the load averages and apply a color code to each depending
        # on how high it is.
        one, five, fifteen = [_set_color(i.strip()) for i in load.split(',')]
        # Get the name of the host that is currently being tested
        host = env['host']
        # Combine the two things and print out the results
        output = u'%s: %s' % (host, ", ".join([one, five, fifteen]))
        print(output)


def rmpyc():
    """
    Erases pyc files from current directory.

    Example usage:

        $ fab rmpyc

    """
    print("Removing .pyc files")
    with hide('everything'):
        local("find . -name '*.pyc' -print0|xargs -0 rm", capture=False)


def rs(port=8000):
    """
    Fire up the Django test server, after cleaning out any .pyc files.

    Example usage:
    
        $ fab rs
        $ fab rs:port=9000
    
    """
    with settings(warn_only=True):
        rmpyc()
    local("python manage.py runserver 0.0.0.0:%s" % port, capture=False)


def sh():
    """
    Fire up the Django shell, after cleaning out any .pyc files.

    Example usage:
    
        $ fab sh
    
    """
    rmpyc()
    local("python manage.py shell", capture=False)

